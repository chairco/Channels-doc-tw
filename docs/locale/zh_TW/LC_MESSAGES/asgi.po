# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Jason(@chairco)
# This file is distributed under the same license as the Channels-docs-zh_TW
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Channels-docs-zh_TW 2.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-21 20:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Jason <chairco@gmail.com>, 2018\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/Channels-zhTW/teams/86661/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../asgi.rst:2
msgid "ASGI"
msgstr "ASGI 非同步伺服器閘道介面 "

#: ../../asgi.rst:4
msgid ""
"ASGI, or the Asynchronous Server Gateway Interface, is the specification "
"which Channels and Daphne are built upon, designed to untie Channels apps "
"from a specific application server and provide a common way to write "
"application and middleware code."
msgstr ""
"ASGI，或是非同步伺服器閘道介面是 Channel 和 Daphne "
"構建的規範，旨在解開來自特定應用程序服務器的通道應用程序，並提供編寫應用程序和中間件代碼的通用方法。"

#: ../../asgi.rst:9
msgid ""
"It's a spiritual successor to WSGI, designed not only run in an asychronous "
"fashion via ``asyncio``, but also supporting multiple protocols."
msgstr ""
"它是 WSGI 的精神繼承者，不僅設計為以非同步方式運行"

#: ../../asgi.rst:12
msgid ""
"The full ASGI spec can be found at "
"https://github.com/django/asgiref/blob/master/specs/asgi.rst"
msgstr ""

#: ../../asgi.rst:17
msgid "Summary"
msgstr ""

#: ../../asgi.rst:19
msgid ""
"An ASGI application is a callable that takes a scope and returns a coroutine"
" callable, that takes receive and send methods. It's usually written as a "
"class::"
msgstr ""

#: ../../asgi.rst:30
msgid ""
"The ``scope`` dict defines the properties of a connection, like its remote "
"IP (for HTTP) or username (for a chat protocol), and the lifetime of a "
"connection. Applications are *instantiated* once per scope - so, for "
"example, once per HTTP request, or once per open WebSocket connection."
msgstr ""

#: ../../asgi.rst:35
msgid ""
"Scopes always have a ``type`` key, which tells you what kind of connection "
"it is and what other keys to expect in the scope (and what sort of messages "
"to expect)."
msgstr ""

#: ../../asgi.rst:39
msgid ""
"The ``receive`` awaitable provides events as dicts as they occur, and the "
"``send`` awaitable sends events back to the client in a similar dict format."
msgstr ""

#: ../../asgi.rst:42
msgid ""
"A *protocol server* sits between the client and your application code, "
"decoding the raw protocol into the scope and event dicts and encoding "
"anything you send back down onto the protocol."
msgstr ""

#: ../../asgi.rst:48
msgid "Composability"
msgstr ""

#: ../../asgi.rst:50
msgid ""
"ASGI applications, like WSGI ones, are designed to be composable, and this "
"includes Channels' routing and middleware components like "
"``ProtocolTypeRouter`` and ``SessionMiddeware``. These are just ASGI "
"applications that take other ASGI applications as arguments, so you can pass"
" around just one top-level application for a whole Django project and "
"dispatch down to the right consumer based on what sort of connection you're "
"handling."
msgstr ""

#: ../../asgi.rst:59
msgid "Protocol Specifications"
msgstr ""

#: ../../asgi.rst:61
msgid ""
"The basic ASGI spec only outlines the interface for an ASGI app - it does "
"not specify how network protocols are encoded to and from scopes and event "
"dicts. That's the job of protocol specifications:"
msgstr ""

#: ../../asgi.rst:65
msgid ""
"HTTP and WebSocket: "
"https://github.com/django/asgiref/blob/master/specs/www.rst"
msgstr ""
