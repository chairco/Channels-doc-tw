# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Jason(@chairco)
# This file is distributed under the same license as the Channels-docs-zh_TW
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Channels-docs-zh_TW 2.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-21 20:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Jason <chairco@gmail.com>, 2018\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/Channels-zhTW/teams/86661/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../topics/worker.rst:2
msgid "Worker and Background Tasks"
msgstr "Worker 與背景任務"

#: ../../topics/worker.rst:4
msgid ""
"While :doc:`channel layers </topics/channel_layers>` are primarily designed "
"for communicating between different instances of ASGI applications, they can"
" also be used to offload work to a set of worker servers listening on fixed "
"channel names, as a simple, very-low-latency task queue."
msgstr ""

#: ../../topics/worker.rst:11
msgid ""
"The worker/background tasks system in Channels is simple and very fast, and "
"achieves this by not having some features you may find useful, such as "
"retries or return values."
msgstr ""

#: ../../topics/worker.rst:15
msgid ""
"We recommend you use it for work that does not need guarantees around being "
"complete (at-most-once delivery), and for work that needs more guarantees, "
"look into a separate dedicated task queue like Celery."
msgstr ""

#: ../../topics/worker.rst:19
msgid ""
"Setting up background tasks works in two parts - sending the events, and "
"then setting up the consumers to receive and process the events."
msgstr ""

#: ../../topics/worker.rst:24
msgid "Sending"
msgstr ""

#: ../../topics/worker.rst:26
msgid ""
"To send an event, just send it to a fixed channel name. For example, let's "
"say we want a background process that pre-caches thumbnails::"
msgstr ""

#: ../../topics/worker.rst:38
msgid ""
"Note that the event you send **must** have a ``type`` key, even if only one "
"type of message is being sent over the channel, as it will turn into an "
"event a consumer has to handle."
msgstr ""

#: ../../topics/worker.rst:42
msgid ""
"Also remember that if you are sending the event from a synchronous "
"environment, you have to use the ``asgiref.sync.async_to_sync`` wrapper as "
"specified in :doc:`channel layers </topics/channel_layers>`."
msgstr ""

#: ../../topics/worker.rst:47
msgid "Receiving and Consumers"
msgstr ""

#: ../../topics/worker.rst:49
msgid ""
"Channels will present incoming worker tasks to you as events inside a scope "
"with a ``type`` of ``channel``, and a ``channel`` key matching the channel "
"name. We recommend you use ProtocolTypeRouter and ChannelNameRouter (see "
":doc:`/topics/routing` for more) to arrange your consumers::"
msgstr ""

#: ../../topics/worker.rst:62
msgid ""
"You'll be specifying the ``type`` values of the individual events yourself "
"when you send them, so decide what your names are going to be and write "
"consumers to match. For example, here's a basic consumer that expects to "
"receive an event with ``type`` ``test.print``, and a ``text`` value "
"containing the text to print::"
msgstr ""

#: ../../topics/worker.rst:72
msgid ""
"Once you've hooked up the consumers, all you need to do is run a process "
"that will handle them. In lieu of a protocol server - as there are no "
"connections involved here - Channels instead provides you this with the "
"``runworker`` command::"
msgstr ""

#: ../../topics/worker.rst:79
msgid ""
"Note that ``runworker`` will only listen to the channels you pass it on the "
"command line. If you do not include a channel, or forget to run the worker, "
"your events will not be received and acted upon."
msgstr ""
