# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Jason(@chairco)
# This file is distributed under the same license as the Channels-docs-zh_TW
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Channels-docs-zh_TW 2.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-21 20:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Jason <chairco@gmail.com>, 2018\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/Channels-zhTW/teams/86661/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../topics/sessions.rst:2
msgid "Sessions"
msgstr "對談 (Sessions)"

#: ../../topics/sessions.rst:4
msgid ""
"Channels supports standard Django sessions using HTTP cookies for both HTTP "
"and WebSocket. There are some caveats, however."
msgstr ""

#: ../../topics/sessions.rst:9
msgid "Basic Usage"
msgstr ""

#: ../../topics/sessions.rst:11
msgid ""
"The ``SessionMiddleware`` in Channels supports standard Django sessions, and"
" like all middleware, should be wrapped around the ASGI application that "
"needs the session information in its scope (for example, a ``URLRouter`` to "
"apply it to a whole collection of consumers, or an individual consumer)."
msgstr ""

#: ../../topics/sessions.rst:16
msgid ""
"``SessionMiddleware`` requires ``CookieMiddleware`` to function. For "
"convenience, these are also provided as a combined callable called "
"``SessionMiddlewareStack`` that includes both. All are importable from "
"``channels.session``."
msgstr ""

#: ../../topics/sessions.rst:21
msgid ""
"To use the middleware, wrap it around the appropriate level of consumer in "
"your ``routing.py``::"
msgstr ""

#: ../../topics/sessions.rst:39
msgid ""
"``SessionMiddleware`` will only work on protocols that provide HTTP headers "
"in their ``scope`` - by default, this is HTTP and WebSocket."
msgstr ""

#: ../../topics/sessions.rst:42
msgid ""
"To access the session, use ``self.scope[\"session\"]`` in your consumer "
"code::"
msgstr ""

#: ../../topics/sessions.rst:49
msgid ""
"``SessionMiddleware`` respects all the same Django settings as the default "
"Django session framework, like SESSION_COOKIE_NAME and "
"SESSION_COOKIE_DOMAIN."
msgstr ""

#: ../../topics/sessions.rst:54
msgid "Session Persistence"
msgstr ""

#: ../../topics/sessions.rst:56
msgid ""
"Within HTTP consumers or ASGI applications, session persistence works as you"
" would expect from Django HTTP views - sessions are saved whenever you send "
"a HTTP response that does not have status code ``500``."
msgstr ""

#: ../../topics/sessions.rst:60
msgid ""
"This is done by overriding any ``http.response.start`` messages to inject "
"cookie headers into the response as you send it out. If you have set the "
"``SESSION_SAVE_EVERY_REQUEST`` setting to ``True``, it will save the session"
" and send the cookie on every response, otherwise it will only save whenever"
" the session is modified."
msgstr ""

#: ../../topics/sessions.rst:66
msgid ""
"If you are in a WebSocket consumer, however, the session is populated **but "
"will never be saved automatically** - you must call "
"``scope[\"session\"].save()`` yourself whenever you want to persist a "
"session to your session store. If you don't save, the session will still "
"work correctly inside the consumer (as it's stored as an instance variable),"
" but other connections or HTTP views won't be able to see the changes."
msgstr ""

#: ../../topics/sessions.rst:75
msgid ""
"If you are in a long-polling HTTP consumer, you might want to save changes "
"to the session before you send a response. If you want to do this, call "
"``scope[\"session\"].save()``."
msgstr ""
