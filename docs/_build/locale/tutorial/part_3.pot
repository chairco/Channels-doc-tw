# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Jason(@chairco)
# This file is distributed under the same license as the Channels-docs-zh_TW package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Channels-docs-zh_TW 2.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-21 20:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial/part_3.rst:2
msgid "Tutorial Part 3: Rewrite Chat Server as Asynchronous"
msgstr ""

#: ../../tutorial/part_3.rst:4
msgid "This tutorial begins where :doc:`Tutorial 2 </tutorial/part_2>` left off. We'll rewrite the consumer code to be asynchronous rather than synchronous to improve its performance."
msgstr ""

#: ../../tutorial/part_3.rst:9
msgid "Rewrite the consumer to be asynchronous"
msgstr ""

#: ../../tutorial/part_3.rst:11
msgid "The ``ChatConsumer`` that we have written is currently synchronous. Synchronous consumers are convenient because they can call regular synchronous I/O functions such as those that access Django models without writing special code. However asynchronous consumers can provide a higher level of performance since they don't need create additional threads when handling requests."
msgstr ""

#: ../../tutorial/part_3.rst:17
msgid "``ChatConsumer`` only uses async-native libraries (Channels and the channel layer) and in particular it does not access synchronous Django models. Therefore it can be rewritten to be asynchronous without complications."
msgstr ""

#: ../../tutorial/part_3.rst:22
msgid "Even if ``ChatConsumer`` *did* access Django models or other synchronous code it would still be possible to rewrite it as asynchronous. Utilities like :ref:`asgiref.sync.sync_to_async <sync_to_async>` and :doc:`channels.db.database_sync_to_async </topics/databases>` can be used to call synchronous code from an asynchronous consumer. The performance gains however would be less than if it only used async-native libraries."
msgstr ""

#: ../../tutorial/part_3.rst:29
msgid "Let's rewrite ``ChatConsumer`` to be asynchronous. Put the following code in ``chat/consumers.py``::"
msgstr ""

#: ../../tutorial/part_3.rst:79
msgid "This new code is for ChatConsumer is very similar to the original code, with the following differences:"
msgstr ""

#: ../../tutorial/part_3.rst:81
msgid "``ChatConsumer`` now inherits from ``AsyncWebsocketConsumer`` rather than ``WebsocketConsumer``."
msgstr ""

#: ../../tutorial/part_3.rst:83
msgid "All methods are ``async def`` rather than just ``def``."
msgstr ""

#: ../../tutorial/part_3.rst:84
msgid "``await`` is used to call asynchronous functions that perform I/O."
msgstr ""

#: ../../tutorial/part_3.rst:85
msgid "``async_to_sync`` is no longer needed when calling methods on the channel layer."
msgstr ""

#: ../../tutorial/part_3.rst:87
msgid "Let's verify that the consumer for the ``/ws/chat/ROOM_NAME/`` path still works. To start the Channels development server, run the following command::"
msgstr ""

#: ../../tutorial/part_3.rst:92
msgid "Open a browser tab to the room page at http://127.0.0.1:8000/chat/lobby/. Open a second browser tab to the same room page."
msgstr ""

#: ../../tutorial/part_3.rst:95
msgid "In the second browser tab, type the message \"hello\" and press enter. You should now see \"hello\" echoed in the chat log in both the second browser tab and in the first browser tab."
msgstr ""

#: ../../tutorial/part_3.rst:99
msgid "Now your chat server is fully asynchronous!"
msgstr ""

#: ../../tutorial/part_3.rst:101
msgid "This tutorial continues in :doc:`Tutorial 4 </tutorial/part_4>`."
msgstr ""

