# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Jason(@chairco)
# This file is distributed under the same license as the Channels-docs-zh_TW package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Channels-docs-zh_TW 2.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-21 20:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../introduction.rst:2
msgid "Introduction"
msgstr ""

#: ../../introduction.rst:4
msgid "Welcome to Channels! Channels changes Django to weave asynchronous code underneath and through Django's synchronous core, allowing Django projects to handle not only HTTP, but protocols that require long-running connections too - WebSockets, MQTT, chatbots, amateur radio, and more."
msgstr ""

#: ../../introduction.rst:9
msgid "It does this while preserving Django's synchronous and easy-to-use nature, allowing you to choose how your write your code - synchronous in a style like Django views, fully asynchronous, or a mixture of both. On top of this, it provides integrations with Django's auth system, session system, and more, making it easier than ever to extend your HTTP-only project to other protocols."
msgstr ""

#: ../../introduction.rst:15
msgid "It also bundles this event-driven architecture with *channel layers*, a system that allows you to easily communicate between processes, and separate your project into different processes."
msgstr ""

#: ../../introduction.rst:19
msgid "If you haven't yet installed Channels, you may want to read :doc:`installation` first to get it installed. This introduction isn't a direct tutorial, but you should be able to use it to follow along and make changes to an existing Django project if you like."
msgstr ""

#: ../../introduction.rst:26
msgid "Turtles All The Way Down"
msgstr ""

#: ../../introduction.rst:28
msgid "Channels operates on the principle of \"turtles all the way down\" - we have a single idea of what a channels \"application\" is, and even the simplest of *consumers* (the equivalent of Django views) are an entirely valid :doc:`/asgi` application you can run by themselves."
msgstr ""

#: ../../introduction.rst:34
msgid "ASGI is the name for the asynchronous server specification that Channels is built on. Like WSGI, it is designed to let you choose between different servers and frameworks rather than being locked into Channels and our server Daphne."
msgstr ""

#: ../../introduction.rst:39
msgid "Channels gives you the tools to write these basic *consumers* - individual pieces that might handle chat messaging, or notifications - and tie them together with URL routing, protocol detection and other handy things to make a full application."
msgstr ""

#: ../../introduction.rst:44
msgid "We treat HTTP and the existing Django views as parts of a bigger whole. Traditional Django views are still there with Channels and still useable - we wrap them up in an ASGI application called ``channels.http.AsgiHandler`` - but you can now also write custom HTTP long-polling handling, or WebSocket receivers, and have that code sit alongside your existing code. URL routing, middleware - they are all just ASGI applications."
msgstr ""

#: ../../introduction.rst:51
msgid "Our belief is that you want the ability to use safe, synchronous techniques like Django views for most code, but have the option to drop down to a more direct, asynchronous interface for complex tasks."
msgstr ""

#: ../../introduction.rst:57
msgid "Scopes and Events"
msgstr ""

#: ../../introduction.rst:59
msgid "Channels splits up incoming connections into two components: a *scope*, and a series of *events*."
msgstr ""

#: ../../introduction.rst:62
msgid "The *scope* is a set of details about a single incoming connection - such as the path a web request was made from, or the originating IP address of a WebSocket, or the user messaging a chatbot - and persists throughout the connection."
msgstr ""

#: ../../introduction.rst:67
msgid "For HTTP, the scope just lasts a single request. For WebSocket, it lasts for the lifetime of the socket (but changes if the socket closes and reconnects). For other protocols, it varies based on how the protocol's ASGI spec is written; for example, it's likely that a chatbot protocol would keep one scope open for the entirety of a user's conversation with the bot, even if the underlying chat protocol is stateless."
msgstr ""

#: ../../introduction.rst:74
msgid "During the lifetime of this *scope*, a series of *events* occur. These represent user interactions - making a HTTP request, for example, or sending a WebSocket frame. Your Channels or ASGI applications will be **instantiated once per scope**, and then be fed the stream of *events* happening within that scope to decide what to do with."
msgstr ""

#: ../../introduction.rst:80
msgid "An example with HTTP:"
msgstr ""

#: ../../introduction.rst:82
msgid "The user makes a HTTP request."
msgstr ""

#: ../../introduction.rst:83
msgid "We open up a new ``http`` type scope with details of the request's path, method, headers, etc."
msgstr ""

#: ../../introduction.rst:85
msgid "We send a ``http.request`` event with the HTTP body content"
msgstr ""

#: ../../introduction.rst:86
msgid "The Channels or ASGI application processes this and generates a ``http.response`` event to send back to the browser and close the connection."
msgstr ""

#: ../../introduction.rst:88
msgid "The HTTP request/response is completed and the scope is destroyed."
msgstr ""

#: ../../introduction.rst:90
msgid "An example with a chatbot:"
msgstr ""

#: ../../introduction.rst:92
msgid "The user sends a first message to the chatbot."
msgstr ""

#: ../../introduction.rst:93
msgid "This opens a scope containing the user's username, chosen name, and user ID."
msgstr ""

#: ../../introduction.rst:94
msgid "The application is given a ``chat.received_message`` event with the event text. It does not have to respond, but could send one, two or more other chat messages back as ``chat.send_message`` events if it wanted to."
msgstr ""

#: ../../introduction.rst:97
msgid "The user sends more messages to the chatbot and more ``chat.received_message`` events are generated."
msgstr ""

#: ../../introduction.rst:99
msgid "After a timeout or when the application process is restarted the scope is closed."
msgstr ""

#: ../../introduction.rst:102
msgid "Within the lifetime of a scope - be that a chat, a HTTP request, a socket connection or something else - you will have one application instance handling all the events from it, and you can persist things onto the application instance as well. You can choose to write a raw ASGI application if you wish, but Channels gives you an easy-to-use abstraction over them called *consumers*."
msgstr ""

#: ../../introduction.rst:110
msgid "What is a Consumer?"
msgstr ""

#: ../../introduction.rst:112
msgid "A consumer is the basic unit of Channels code. We call it a *consumer* as it *consumes events*, but you can think of it as its own tiny little application. When a request or new socket comes in, Channels will follow its routing table - we'll look at that in a bit - find the right consumer for that incoming connection, and start up a copy of it."
msgstr ""

#: ../../introduction.rst:118
msgid "This means that, unlike Django views, consumers are long-running. They can also be short-running - after all, HTTP requests can also be served by consumers - but they're built around the idea of living for a little while (they live for the duration of a *scope*, as we described above)."
msgstr ""

#: ../../introduction.rst:123
msgid "A basic consumer looks like this::"
msgstr ""

#: ../../introduction.rst:142
msgid "Each different protocol has different kinds of events that happen, and each type is represented by a different method. You write code that handles each event, and Channels will take care of scheduling them and running them all in parallel."
msgstr ""

#: ../../introduction.rst:147
msgid "Underneath, Channels is running on a fully asynchronous event loop, and if you write code like above, it will get called in a synchronous thread. This means you can safely do blocking operations, like calling the Django ORM::"
msgstr ""

#: ../../introduction.rst:159
msgid "However, if you want more control and you're willing to work only in asynchronous functions, you can write fully asynchronous consumers::"
msgstr ""

#: ../../introduction.rst:175
msgid "You can read more about consumers in :doc:`/topics/consumers`."
msgstr ""

#: ../../introduction.rst:179
msgid "Routing and Multiple Protocols"
msgstr ""

#: ../../introduction.rst:181
msgid "You can combine multiple Consumers (which are, remember, their own ASGI apps) into one bigger app that represents your project using routing::"
msgstr ""

#: ../../introduction.rst:189
msgid "Channels is not just built around the world of HTTP and WebSockets - it also allows you to build any protocol into a Django environment, by building a server that maps those protocols into a similar set of events. For example, you can build a chatbot in a similar style::"
msgstr ""

#: ../../introduction.rst:205
msgid "And then use another router to have the one project able to serve both WebSockets and chat requests::"
msgstr ""

#: ../../introduction.rst:218
msgid "The goal of Channels is to let you build out your Django projects to work across any protocol or transport you might encounter in the modern web, while letting you work with the familiar components and coding style you're used to."
msgstr ""

#: ../../introduction.rst:222
msgid "For more information about protocol routing, see :doc:`/topics/routing`."
msgstr ""

#: ../../introduction.rst:226
msgid "Cross-Process Communication"
msgstr ""

#: ../../introduction.rst:228
msgid "Much like a standard WSGI server, your application code that is handling protocol events runs inside the server process itself - for example, WebSocket handling code runs inside your WebSocket server process."
msgstr ""

#: ../../introduction.rst:232
msgid "Each socket or connection to your overall application is handled by a *application instance* inside one of these servers. They get called and can send data back to the client directly."
msgstr ""

#: ../../introduction.rst:236
msgid "However, as you build more complex application systems you start needing to communicate between different *application instances* - for example, if you are building a chatroom, when one *application instance* receives an incoming message, it needs to distribute it out to any other instances that represent people in the chatroom."
msgstr ""

#: ../../introduction.rst:242
msgid "You can do this by polling a database, but Channels introduces the idea of a *channel layer*, a low-level abstraction around a set of transports that allow you to send information between different processes. Each application instance has a unique *channel name*, and can join *groups*, allowing both point-to-point and broadcast messaging."
msgstr ""

#: ../../introduction.rst:250
msgid "Channel layers are an optional part of Channels, and can be disabled if you want (by setting the ``CHANNEL_LAYERS`` setting to an empty value)."
msgstr ""

#: ../../introduction.rst:253
msgid "(insert cross-process example here)"
msgstr ""

#: ../../introduction.rst:255
msgid "You can also send messages to a dedicated process that's listening on its own, fixed channel name::"
msgstr ""

#: ../../introduction.rst:267
msgid "You can read more about channel layers in :doc:`/topics/channel_layers`."
msgstr ""

#: ../../introduction.rst:271
msgid "Django Integration"
msgstr ""

#: ../../introduction.rst:273
msgid "Channels ships with easy drop-in support for common Django features, like sessions and authentication. You can combine authentication with your WebSocket views by just adding the right middleware around them::"
msgstr ""

#: ../../introduction.rst:285
msgid "For more, see :doc:`/topics/sessions` and :doc:`/topics/authentication`."
msgstr ""

